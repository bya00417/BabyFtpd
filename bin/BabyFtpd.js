// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var BabyFtpd, ftpd, net;

  net = require("net");

  module.exports = BabyFtpd = (function() {
    var commands, messages;

    function BabyFtpd(option) {
      if (option == null) {
        option = {};
      }
      this.piServer = void 0;
    }

    BabyFtpd.prototype.listen = function(port, host) {
      if (port == null) {
        port = 21;
      }
      if (host == null) {
        host = "0.0.0.0";
      }
      this.piServer = net.createServer();
      this.piServer.on('listening', function() {
        var hostInfo;
        hostInfo = this.address();
        return console.log("Server listening on " + hostInfo.address + ":" + hostInfo.port);
      });
      this.piServer.on('connection', function(socket) {
        console.log("Connect from " + socket.remoteAddress);
        socket.setTimeout(0);
        socket.setNoDelay();
        socket.dataEncoding = "binary";
        socket.passive = false;
        socket.reply = function(status, message, callback) {
          var i, replyData, replys, _i, _ref;
          message = (message != null ? message : messages[status.toString()]) || "No information";
          message = message.replace(/\r?\n/g, "\n");
          replys = message.split("\n");
          if (replys.length === 1) {
            replyData = status.toString() + " " + replys[0] + "\r\n";
          } else {
            replyData = status.toString() + "-";
            for (i = _i = 0, _ref = replys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (i === (replys.length - 1)) {
                replyData += status.toString() + " ";
              } else if (replys[i].substring(0, i).match(/[0-9]/)) {
                replyData += "  ";
              }
              replyData += replys[i] + "\r\n";
            }
          }
          return this.write(replyData, callback);
        };
        socket.on('data', function(recData) {
          var args, callable, command, parts;
          console.log(recData.toString().trim());
          parts = recData.toString().trim().split(" ");
          command = parts[0].trim().toUpperCase();
          args = parts.slice(1, parts.length);
          callable = commands[command];
          if (!callable) {
            return this.reply(502);
          } else {
            return callable.apply(socket, args);
          }
        });
        socket.on('close', function() {
          return console.log("Server socket closed.");
        });
        return socket.reply(220);
      });
      return this.piServer.listen(port, host);
    };

    messages = {
      "110": "Restart marker reply.",
      "125": "Data connection already open; transfer starting.",
      "150": "File status okay; about to open data connection.",
      "200": "Command okay.",
      "202": "Command not implemented, superfluous at this site.",
      "211": "System status, or system help reply.",
      "212": "Directory status.",
      "213": "File status.",
      "215": "NAME system type.",
      "220": "Service ready for new user.",
      "221": "Service closing control connection.",
      "225": "Data connection open; no transfer in progress.",
      "226": "Closing data connection.",
      "230": "User logged in, proceed.",
      "250": "Requested file action okay, completed.",
      "331": "User name okay, need password.",
      "332": "Need account for login.",
      "350": "Requested file action pending further information.",
      "421": "Service not available, closing control connection.",
      "425": "Can't open data connection.",
      "426": "Connection closed; transfer aborted.",
      "450": "Requested file action not taken.",
      "451": "Requested action aborted. Local error in processing.",
      "452": "Requested action not taken.",
      "500": "Syntax error, command unrecognized.",
      "501": "Syntax error in parameters or arguments.",
      "502": "Command not implemented.",
      "503": "Bad sequence of commands.",
      "504": "Command not implemented for that parameter.",
      "530": "Not logged in.",
      "532": "Need account for storing files.",
      "550": "Requested action not taken.",
      "551": "Requested action aborted. Page type unknown.",
      "552": "Requested file action aborted.",
      "553": "Requested action not taken.",
      "120": "Service ready in XXX minutes.",
      "214": "Help message.",
      "227": "Entering Passive Mode (h1,h2,h3,h4,p1,p2).",
      "257": "<PATHNAME> created."
    };

    commands = {
      "ACCT": function() {
        return this.reply(202);
      },
      "CWD": function() {
        return this.reply(202);
      },
      "CDUP": function() {
        return this.reply(202);
      },
      "SMNT": function() {
        return this.reply(202);
      },
      "REIN": function() {
        return this.reply(202);
      },
      "PORT": function() {
        return this.reply(202);
      },
      "TYPE": function() {
        return this.reply(202);
      },
      "STRU": function() {
        return this.reply(202);
      },
      "MODE": function() {
        return this.reply(202);
      },
      "STOR": function() {
        return this.reply(202);
      },
      "STOU": function() {
        return this.reply(202);
      },
      "APPE": function() {
        return this.reply(202);
      },
      "ALLO": function() {
        return this.reply(202);
      },
      "REST": function() {
        return this.reply(202);
      },
      "RNFR": function() {
        return this.reply(202);
      },
      "RNTO": function() {
        return this.reply(202);
      },
      "ABOR": function() {
        return this.reply(202);
      },
      "DELE": function() {
        return this.reply(202);
      },
      "RMD": function() {
        return this.reply(202);
      },
      "MKD": function() {
        return this.reply(202);
      },
      "LIST": function() {
        return this.reply(202);
      },
      "SITE": function() {
        return this.reply(202);
      },
      "STAT": function() {
        return this.reply(202);
      },
      "USER": function(username) {
        return this.reply(331);
      },
      "PASS": function(password) {
        return this.reply(230);
      },
      "PWD": function() {
        return this.reply(257, '"/"');
      },
      "NLST": function() {
        this.dtpServer.dataQueue = "ABC\r\n";
        return this.reply(150);
      },
      "RETR": function() {
        this.dtpServer.dataQueue = "<html></html>";
        return this.reply(150);
      },
      "SYST": function() {
        return this.reply(215, "Node_BabyFTP_server");
      },
      "QUIT": function() {
        this.reply(221);
        return this.end();
      },
      "PASV": function() {
        var dtpHost, socket;
        socket = this;
        socket.passive = true;
        socket.dtpServer = net.createServer();
        dtpHost = socket.server.address().address;
        socket.dtpServer.dataQueue = null;
        socket.dtpServer.on('listening', function() {
          var dtpAddress, host, port1, port2;
          dtpAddress = this.address();
          console.log("Data Transfer Proccess Server listening on " + dtpAddress.address + ":" + dtpAddress.port);
          host = dtpAddress.address.split(".").join(",");
          port1 = parseInt(dtpAddress.port / 256, 10);
          port2 = dtpAddress.port % 256;
          return socket.reply(227, "Entering Extended Passive Mode (" + host + "," + port1 + "," + port2 + ")");
        });
        socket.dtpServer.on("connection", function(dtpSocket) {
          console.log("DTP Connect from " + dtpSocket.remoteAddress);
          dtpSocket.setTimeout(0);
          dtpSocket.setNoDelay();
          dtpSocket.dataEncoding = "binary";
          dtpSocket.on("end", function() {
            socket.dtpServer.close();
            return socket.reply(226);
          });
          dtpSocket.on("close", function() {
            return console.log("DTP Socket closed");
          });
          dtpSocket.on("connect", function() {
            return console.log("DTP Socket connect");
          });
          dtpSocket.on('data', function(recData) {
            return console.log(recData.toString().trim());
          });
          dtpSocket.sender = function() {
            console.log(socket.dtpServer.dataQueue);
            if (socket.dtpServer.dataQueue !== null) {
              console.log("Send");
              clearInterval(dtpSocket.intervalId);
              return dtpSocket.end(socket.dtpServer.dataQueue);
            }
          };
          return dtpSocket.intervalId = setInterval(dtpSocket.sender, 100);
        });
        socket.dtpServer.on("close", function() {
          console.log("Data Transfer Proccess Server closed");
          return socket.passive = false;
        });
        return socket.dtpServer.listen(0, dtpHost);
      },
      "NOOP": function() {
        return this.reply(200);
      },
      "HELP": function() {
        return this.reply(214, "The following commands are recognized\nUSER    PASS    PWD     NLST    RETR    SYST\nQUIT    PASV    NOOP    HELP\nDirect comments to root");
      }
    };

    return BabyFtpd;

  })();

  if (!module.parent) {
    ftpd = new BabyFtpd;
    ftpd.listen(8021, "localhost");
  }

}).call(this);
